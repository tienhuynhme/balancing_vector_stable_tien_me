import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm

st.set_page_config(page_title="C√¢n B·∫±ng ƒê·ªông - Add Mass", layout="centered")
st.title("‚öôÔ∏è Ph√¢n T√≠ch Vector M·∫•t C√¢n B·∫±ng (Add Mass)")

# ƒê∆°n v·ªã m·∫∑c ƒë·ªãnh: nh·∫≠p kh·ªëi l∆∞·ª£ng v√† b√°n k√≠nh ri√™ng bi·ªát
m_input = st.number_input("üî∏ Kh·ªëi l∆∞·ª£ng m·∫•t c√¢n b·∫±ng ƒëo ƒë∆∞·ª£c (g)", min_value=0.0, value=2.0)
fixed_r = st.number_input("üî∏ B√°n k√≠nh v·ªã tr√≠ m·∫•t c√¢n b·∫±ng (mm)", min_value=1.0, value=50.0)
M = m_input * fixed_r
    M_mass = st.number_input("üî∏ T·ªïng kh·ªëi l∆∞·ª£ng m·∫•t c√¢n b·∫±ng (g)", min_value=0.0, value=2.0)
    fixed_r = st.number_input("üî∏ B√°n k√≠nh s·ª≠ d·ª•ng ƒë·ªÉ quy ƒë·ªïi (mm)", min_value=1.0, value=50.0)
    M = M_mass * fixed_r

angle_step = st.number_input("üî∏ B∆∞·ªõc g√≥c c·ªë ƒë·ªãnh (¬∞)", min_value=1.0, max_value=180.0, value=30.0)
# B√°n k√≠nh ƒë√£ nh·∫≠p t·ª´ ƒë·∫ßu
fixed_m = st.number_input("üî∏ Kh·ªëi l∆∞·ª£ng c·ªë ƒë·ªãnh m·ªói vector (g)", min_value=0.01, value=5.0)
theta = st.number_input("üî∏ G√≥c m·∫•t c√¢n b·∫±ng (¬∞)", min_value=0.0, max_value=360.0, value=45.0)

if st.button("üöÄ Ph√¢n t√°ch & Hi·ªÉn th·ªã"):
    theta_rad = np.radians(theta)
    Mx, My = M * np.cos(theta_rad), M * np.sin(theta_rad)
    Mi = fixed_m * fixed_r
    n_vectors = 0
    used_angles = set()
    valid_angles = np.radians(np.arange(0, 360, angle_step))
    components = []

    while np.sqrt(Mx**2 + My**2) > Mi and n_vectors < 1000:
        best_angle = None
        min_error = float("inf")
        for angle in valid_angles:
            if angle in used_angles:
                continue
            vx, vy = Mi * np.cos(angle), Mi * np.sin(angle)
            error = (Mx - vx)**2 + (My - vy)**2
            if error < min_error:
                min_error = error
                best_angle = angle
        if best_angle is None:
            break
        vx, vy = Mi * np.cos(best_angle), Mi * np.sin(best_angle)
        Mx -= vx
        My -= vy
        components.append((fixed_m, fixed_r, np.degrees(best_angle)))
        used_angles.add(best_angle)
        n_vectors += 1

    remaining_moment = np.sqrt(Mx**2 + My**2)
    if remaining_moment > 0.01:
        angle = np.arctan2(My, Mx)
        if angle not in used_angles:
            m_last = remaining_moment / fixed_r
            components.append((m_last, fixed_r, np.degrees(angle)))

    st.session_state.components = components

if "components" in st.session_state:
    components = st.session_state.components
    df = pd.DataFrame(components, columns=["Kh·ªëi l∆∞·ª£ng (g)", "B√°n k√≠nh (mm)", "G√≥c (¬∞)"])
    st.subheader("üìã Danh s√°ch vector th√†nh ph·∫ßn:")
    st.dataframe(df.style.format({"Kh·ªëi l∆∞·ª£ng (g)": "{:.2f}", "B√°n k√≠nh (mm)": "{:.1f}", "G√≥c (¬∞)": "{:.1f}"}))

    check_Mx = sum(m * r * np.cos(np.radians(a)) for m, r, a in components)
    check_My = sum(m * r * np.sin(np.radians(a)) for m, r, a in components)
    total_moment = np.sqrt(check_Mx**2 + check_My**2)
    error = abs(total_moment - M)

    st.markdown("### ‚úÖ Ki·ªÉm tra t·ªïng moment")
    st.write(f"‚Ä¢ T·ªïng moment th√†nh ph·∫ßn: {total_moment:.2f} g.mm")
    st.write(f"‚Ä¢ Moment g·ªëc nh·∫≠p v√†o: {M:.2f} g.mm")
    st.write(f"‚Ä¢ Sai s·ªë c√≤n l·∫°i: {error:.4f} g.mm")

    if len(components) > 1:
        usable_count = st.slider("Ch·ªçn s·ªë vector b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán", 1, len(components), len(components))
        partial_components = components[:usable_count]
        res_x = sum(m * r * np.cos(np.radians(a)) for m, r, a in partial_components)
        res_y = sum(m * r * np.sin(np.radians(a)) for m, r, a in partial_components)
        residual_moment = np.sqrt((M * np.cos(np.radians(theta)) - res_x)**2 + (M * np.sin(np.radians(theta)) - res_y)**2)

        st.markdown("### üìâ Sai s·ªë n·∫øu ch·ªâ th·ª±c hi·ªán m·ªôt ph·∫ßn:")
        st.write(f"‚Ä¢ Vector l√Ω t∆∞·ªüng: {len(components)}")
        st.write(f"‚Ä¢ Vector b·∫°n c√≥ th·ªÉ th·ª±c hi·ªán: {usable_count}")
        st.write(f"‚Ä¢ Moment c√≤n d∆∞: {residual_moment:.2f} g.mm")

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.set_aspect('equal')
    ax.set_xlim(-M * 1.2, M * 1.2)
    ax.set_ylim(-M * 1.2, M * 1.2)

    circle = plt.Circle((0, 0), fixed_r, color='lightgray', fill=False, linestyle='--')
    ax.add_patch(circle)
    for deg in range(0, 360, int(angle_step)):
        rad = np.radians(deg)
        ax.plot([0, fixed_r * 1.2 * np.cos(rad)], [0, fixed_r * 1.2 * np.sin(rad)], color='lightgray', lw=0.5, linestyle='--')
        ax.text(fixed_r * 1.3 * np.cos(rad), fixed_r * 1.3 * np.sin(rad), f"{deg}¬∞", fontsize=8, ha='center', va='center')

    ax.quiver(0, 0, M * np.cos(np.radians(theta)), M * np.sin(np.radians(theta)),
              angles='xy', scale_units='xy', scale=1, color='red', label="Vector M·∫•t C√¢n B·∫±ng")

    x, y = 0, 0
    colors = cm.viridis(np.linspace(0, 1, len(components)))
    for i, (mass, r, angle) in enumerate(components):
        angle_rad = np.radians(angle)
        dx, dy = mass * r * np.cos(angle_rad), mass * r * np.sin(angle_rad)
        ax.quiver(x, y, dx, dy, angles='xy', scale_units='xy', scale=1, color=colors[i], alpha=0.8)
        x += dx
        y += dy

    ax.set_title("M√¥ ph·ªèng vector tr√™n rotor")
    ax.legend()
    st.pyplot(fig)
